name: DevOps

on:
  workflow_dispatch:
    inputs:
      ArtifactType:
        required: true
        description: 'Integration/ValueMapping/ScriptCollection'
      ArtifactName:
        required: true
      ArtifactID:
        required: true
      PackageName:
        required: true
      IsNewPackage:
        required: true
        description: 'Is this new package? Yes/No'

          # echo "ArtifactType = ${{ github.event.inputs.ArtifactType }}" >> $GITHUB_ENV
          # echo "ArtifactName = ${{ github.event.inputs.ArtifactName }}" >> $GITHUB_ENV
          # echo "ArtifactID = ${{ github.event.inputs.ArtifactID }}" >> $GITHUB_ENV
          # echo "PackageName = ${{ github.event.inputs.PackageName }}" >> $GITHUB_ENV
          # echo "IsNewPackage = ${{ github.event.inputs.IsNewPackage }}" >> $GITHUB_ENV
      
  # push:
  #   branches:
  #     - main
  #   paths:
  #     - 'Script Collections Backup/**.zip'
  #     - 'ValueMapping Backup/**.zip'
  #     - 'iFlows Backup/**.zip'

jobs:
  Development:
    runs-on: ubuntu-latest
    environment: Development
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
#------------Determine Repo folder based on type of Artifact-----------------------
      - name: Determine Repo Folder Path
        run: |
          if [ "${{ github.event.inputs.ArtifactType }}" == "Integration" ]; then
            echo "RepoFolderPath=iFlows Backup" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ArtifactType }}" == "ValueMapping" ]; then
            echo "RepoFolderPath=ValueMapping Backup" >> $GITHUB_ENV
          elif [ "${{ github.event.inputs.ArtifactType }}" == "ScriptCollection" ]; then
            echo "RepoFolderPath=Script Collections Backup" >> $GITHUB_ENV
          else
            echo "Unknown ArtifactType"
            exit 1
          fi

      - name: Print Repo Folder Path
        run: |
          echo "RepoFolderPath is ${{ env.RepoFolderPath }}"
          echo "CPI URL is ${{ vars.CPI_API_HOSTPORT }}"
        

 #------------------Get CPI creds and download the zip------------------------       
      - name: Get CPI Access Token
        id: get-token
        env:
          CLIENT_ID: ${{ secrets.ROJODEMO_APIHUB_CLIENTID }}
          CLIENT_SECRET: ${{ secrets.ROJODEMO_APIHUB_CLIENTSECRET }}
        run: |
          echo "Fetching access token..."
          TOKEN_RESPONSE=$(curl -s -X POST \
            -d "grant_type=client_credentials" \
            -d "client_id=$CLIENT_ID" \
            -d "client_secret=$CLIENT_SECRET" \
            https://rojo-demo-0i5fylx4.authentication.eu12.hana.ondemand.com/oauth/token)

          ACCESS_TOKEN=$(echo $TOKEN_RESPONSE | jq -r .access_token)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to get access token"
            exit 1
          fi

          echo "ACCESS_TOKEN = $ACCESS_TOKEN"

      - name: Call CPI Delta Upload iflow
        env:
          ACCESS_TOKEN: ${{ env.ACCESS_TOKEN }}
          REPO_PATH: ${{ env.RepoFolderPath }}
        run: |
          API_URL="https://${{ vars.CPI_API_HOSTPORT }}/api/v1/${{ github.event.inputs.ArtifactType }}DesigntimeArtifacts(Id='${{ github.event.inputs.ArtifactID }}',Version='active')/\$value"
          echo "Downloading zip file..."
          echo "URL = $API_URL"
          curl -H "Authorization: Bearer $ACCESS_TOKEN" -L $API_URL -o artifact.zip
          mv artifact.zip 'test/your.zip'
          


      # - name: Upload files
      #   run: |
      #     echo "Uploading zip..."
      #     rsync -av --progress artifact.zip/ ./test/
  Quality:
      needs: Development
      runs-on: ubuntu-latest
      environment: Quality
      steps:
        - name: hello world
          run: echo "Hello World"
          shell: bash
  
